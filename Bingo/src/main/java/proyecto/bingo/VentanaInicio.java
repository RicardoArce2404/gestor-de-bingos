package proyecto.bingo;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.ChartUtilities;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * ...
 */
public class VentanaInicio extends javax.swing.JFrame {

    private Bingo bingo;  // Objeto bingo a usar durante la sesión actual.

    /**
     * Creates new form VentanaInicio
     */
    public VentanaInicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        botonRegistrarJugador = new javax.swing.JButton();
        botonGenerarVerCartones = new javax.swing.JButton();
        botonBuscarCarton = new javax.swing.JButton();
        botonIniciarJuego = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        botonEnviarCarton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setMaximumSize(new java.awt.Dimension(32730, 32750));
        jPanel2.setPreferredSize(new java.awt.Dimension(736, 430));

        botonRegistrarJugador.setBackground(new java.awt.Color(204, 204, 255));
        botonRegistrarJugador.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonRegistrarJugador.setText("Registrar jugador");
        botonRegistrarJugador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        botonRegistrarJugador.setBorderPainted(false);
        botonRegistrarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarJugadorActionPerformed(evt);
            }
        });

        botonGenerarVerCartones.setBackground(new java.awt.Color(204, 204, 255));
        botonGenerarVerCartones.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonGenerarVerCartones.setText("Generar cartones");
        botonGenerarVerCartones.setToolTipText("");
        botonGenerarVerCartones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        botonGenerarVerCartones.setBorderPainted(false);
        botonGenerarVerCartones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarVerCartonesActionPerformed(evt);
            }
        });

        botonBuscarCarton.setBackground(new java.awt.Color(204, 204, 255));
        botonBuscarCarton.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonBuscarCarton.setText("Consultar cartón");
        botonBuscarCarton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        botonBuscarCarton.setBorderPainted(false);
        botonBuscarCarton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarCartonActionPerformed(evt);
            }
        });

        botonIniciarJuego.setBackground(new java.awt.Color(204, 204, 255));
        botonIniciarJuego.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonIniciarJuego.setText("Iniciar juego");
        botonIniciarJuego.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        botonIniciarJuego.setBorderPainted(false);
        botonIniciarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIniciarJuegoActionPerformed(evt);
            }
        });

        botonSalir.setBackground(new java.awt.Color(204, 204, 255));
        botonSalir.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonSalir.setText("Salir");
        botonSalir.setBorderPainted(false);
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        botonEnviarCarton.setBackground(new java.awt.Color(204, 204, 255));
        botonEnviarCarton.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        botonEnviarCarton.setText("Enviar cartón");
        botonEnviarCarton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        botonEnviarCarton.setBorderPainted(false);
        botonEnviarCarton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarCartonActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 204, 255));
        jButton3.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        jButton3.setText("Generar estadísticas");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(204, 204, 255));
        jButton4.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        jButton4.setText("Generar wordCloud");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Papyrus", 0, 36)); // NOI18N
        jLabel2.setText("Bienvenido al gestor de bingo");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(botonIniciarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botonGenerarVerCartones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscarCarton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonEnviarCarton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonRegistrarJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(133, 133, 133)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonBuscarCarton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonIniciarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGenerarVerCartones, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonRegistrarJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(100, 100, 100)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonEnviarCarton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

  private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
      bingo = new Bingo();
  }                                 

  private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
      bingo.guardarJugadoresEnCSV();
  }                                  

    private void botonEnviarCartonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        EnviarCarton ventanaEnviarCarton = new EnviarCarton(bingo);
        ventanaEnviarCarton.setVisible(true);
    }                                                 

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {                                           
        bingo.guardarJugadoresEnCSV();
        System.exit(0);
    }                                          

    private void botonIniciarJuegoActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        IniciarJuego ventanaIniciarJuego = new IniciarJuego(bingo);
        ventanaIniciarJuego.setVisible(true);
    }                                                 

    private void botonBuscarCartonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        ConsultarCarton ventanaConsultarCarton = new ConsultarCarton(bingo);
        ventanaConsultarCarton.setVisible(true);
    }                                                 

    private void botonGenerarVerCartonesActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        GenerarCartones ventanaGenerarCartones = new GenerarCartones(bingo);
        ventanaGenerarCartones.setVisible(true);
    }                                                       

    private void botonRegistrarJugadorActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        RegistrarJugador ventanaRegistrarJugador = new RegistrarJugador(bingo);
        ventanaRegistrarJugador.setVisible(true);
    }                                                     

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        SwingUtilities.invokeLater(() -> {
            // Crear una ventana de selección de estadísticas
            JFrame selectionFrame = new JFrame("Seleccionar Estadísticas");
            selectionFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            selectionFrame.setSize(400, 150);

            // Crear un panel principal con BorderLayout
            JPanel mainPanel = new JPanel(new BorderLayout());

            // Crear un panel para los botones con FlowLayout
            JPanel buttonPanel = new JPanel(new FlowLayout());

            // Botones para seleccionar el tipo de estadísticas
            JButton botonGraficoBarras = new JButton("Gráfico de Barras");
            JButton botonGraficoCircular = new JButton("Gráfico Circular");

            // Agregar los botones al panel
            buttonPanel.add(botonGraficoBarras);
            buttonPanel.add(botonGraficoCircular);

            // Personalizar el aspecto de los botones
            botonGraficoBarras.setPreferredSize(new Dimension(180, 40));
            botonGraficoCircular.setPreferredSize(new Dimension(180, 40));

            // Agregar el panel de botones al centro del panel principal
            mainPanel.add(buttonPanel, BorderLayout.CENTER);

            // Manejadores de eventos para los botones
            botonGraficoBarras.addActionListener(e -> mostrarEstadisticasGraficoBarras());
            botonGraficoCircular.addActionListener(e -> mostrarEstadisticasGraficoCircular());

            // Agregar el panel principal a la ventana de selección
            selectionFrame.add(mainPanel);

            // Centrar la ventana en la pantalla
            selectionFrame.setLocationRelativeTo(null);

            // Mostrar la ventana de selección de estadísticas
            selectionFrame.setVisible(true);
        });
    }

    /**
     * Muestra las estadísticas en un gráfico de barras.
     */
    private static void mostrarEstadisticasGraficoBarras() {
        SwingUtilities.invokeLater(() -> {
            // Crear una ventana JFrame para mostrar el gráfico de barras
            JFrame frame = new JFrame("Estadísticas - Gráfico de Barras");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(800, 600);

            // Crear un conjunto de datos para las estadísticas del gráfico de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            // Leer el archivo XML y procesar los datos
            try {
                // Ruta al archivo XML
                File archivoXML = new File("RegistroBingo.xml");

                // Parsear el archivo XML
                DocumentBuilderFactory fabricaDocumentos = DocumentBuilderFactory.newInstance();
                DocumentBuilder constructorDocumentos = fabricaDocumentos.newDocumentBuilder();
                Document documento = constructorDocumentos.parse(archivoXML);

                // Obtener la lista de elementos <partida>
                NodeList partidas = documento.getElementsByTagName("partida");

                // Crear un mapa para contar la frecuencia de los números
                Map<String, Integer> frecuenciaNumeros = new HashMap<>();

                for (int i = 0; i < partidas.getLength(); i++) {
                    Element partida = (Element) partidas.item(i);

                    // Obtener la lista de números cantados
                    String numerosCantados = partida.getElementsByTagName("numerosCantados").item(0).getTextContent();
                    String[] numeros = numerosCantados.split(",");

                    // Contar la frecuencia de cada número
                    for (String numero : numeros) {
                        frecuenciaNumeros.put(numero, frecuenciaNumeros.getOrDefault(numero, 0) + 1);
                    }
                }

                // Ordenar los números por frecuencia en orden descendente y tomar los 10 más frecuentes
                Stream<Map.Entry<String, Integer>> numerosMasFrecuentes = frecuenciaNumeros.entrySet()
                        .stream()
                        .sorted((Map.Entry.<String, Integer>comparingByValue().reversed()))
                        .limit(10);

                // Agregar los datos al conjunto de datos del gráfico de barras
                numerosMasFrecuentes.forEach(entrada -> {
                    String numero = entrada.getKey();
                    int frecuencia = entrada.getValue();
                    dataset.addValue(frecuencia, "Números más cantados", numero);
                });
            } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
            }

            // Crear el gráfico de barras
            JFreeChart grafico = ChartFactory.createBarChart(
                    "Top 10 de Números Cantados (Gráfico de Barras)",
                    "Número",
                    "Frecuencia",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Personalizar el gráfico de barras
            CategoryPlot plot = grafico.getCategoryPlot();
            BarRenderer renderizador = (BarRenderer) plot.getRenderer();
            renderizador.setBarPainter(new StandardBarPainter());

            // Crear un panel para mostrar el gráfico
            ChartPanel panelGrafico = new ChartPanel(grafico);
            panelGrafico.setPreferredSize(new Dimension(600, 400));
            frame.add(panelGrafico, BorderLayout.CENTER);

            frame.setVisible(true);
        });
    }

    /**
     * Muestra las estadísticas en un gráfico circular.
     */
    private static void mostrarEstadisticasGraficoCircular() {
        SwingUtilities.invokeLater(() -> {
            // Crear una ventana JFrame para mostrar el gráfico circular
            JFrame frame = new JFrame("Estadísticas - Gráfico Circular");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(800, 600);

            // Crear un conjunto de datos ficticio para las estadísticas del gráfico circular
            DefaultPieDataset dataset = new DefaultPieDataset();

            // Leer el archivo XML y procesar los datos
            try {
                // Ruta al archivo XML
                File archivoXML = new File("RegistroBingo.xml");

                // Parsear el archivo XML
                DocumentBuilderFactory fabricaDocumentos = DocumentBuilderFactory.newInstance();
                DocumentBuilder constructorDocumentos = fabricaDocumentos.newDocumentBuilder();
                Document documento = constructorDocumentos.parse(archivoXML);

                // Obtener la lista de elementos <partida>
                NodeList partidas = documento.getElementsByTagName("partida");

                // Crear un mapa para contar la frecuencia de las configuraciones de partidas
                Map<String, Integer> frecuenciaConfiguraciones = new HashMap<>();

                for (int i = 0; i < partidas.getLength(); i++) {
                    Element partida = (Element) partidas.item(i);

                    // Obtener el tipo de configuración de la partida
                    String tipoConfiguracion = partida.getElementsByTagName("tipo").item(0).getTextContent();

                    // Contar la frecuencia de cada tipo de configuración
                    frecuenciaConfiguraciones.put(tipoConfiguracion, frecuenciaConfiguraciones.getOrDefault(tipoConfiguracion, 0) + 1);
                }

                // Agregar los datos al conjunto de datos del gráfico circular
                frecuenciaConfiguraciones.forEach((tipo, frecuencia) -> {
                    String etiqueta = "";
                    switch (tipo) {
                        case "X" ->
                            etiqueta = "Jugar en X";
                        case "Z" ->
                            etiqueta = "Jugar en Z";
                        case "E" ->
                            etiqueta = "Jugar Cuatro Esquinas";
                        case "L" ->
                            etiqueta = "Jugar Cartón Lleno";
                    }
                    dataset.setValue(etiqueta, frecuencia);
                });
            } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
            }

            // Crear el gráfico circular
            JFreeChart grafico = ChartFactory.createPieChart(
                    "Frecuencia Histórica de Configuración de Partidas (Gráfico Circular)",
                    dataset,
                    true, true, false);

            // Obtener el objeto PiePlot para personalizar el gráfico
            PiePlot plot = (PiePlot) grafico.getPlot();

            // Personalizar las etiquetas del gráfico
            plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} ({1})"));

            // Crear un panel para mostrar el gráfico
            ChartPanel panelGrafico = new ChartPanel(grafico);
            panelGrafico.setPreferredSize(new Dimension(600, 400));
            frame.add(panelGrafico, BorderLayout.CENTER);

            frame.setVisible(true);
        });

    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        SwingUtilities.invokeLater(() -> {
            var frame = new JFrame("Nube de Palabras");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(800, 600);

            JPanel panelNubeDePalabras = new JPanel() {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                  try {
                    generarNubeDePalabras(g, this);
                  } catch (MessagingException ex) {
                    Logger.getLogger(VentanaInicio.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (IOException ex) {
                    Logger.getLogger(VentanaInicio.class.getName()).log(Level.SEVERE, null, ex);
                  }
                }
            };

            // Establecer fondo blanco
            panelNubeDePalabras.setBackground(Color.BLACK);

            frame.add(panelNubeDePalabras);
            frame.setVisible(true);
        });
    }

    /**
     * Genera una nube de palabras en el panel dado.
     *
     * @param g El objeto Graphics utilizado para dibujar las palabras.
     * @param panel El panel en el que se muestra la nube de palabras.
     */
    private static void generarNubeDePalabras(Graphics g, JPanel panel) throws MessagingException, NoSuchProviderException, IOException {
        CuentaCorreo correo = new CuentaCorreo("bingolimonense@gmail.com");
        ArrayList<String> palabras = correo.leerCorreosRecibidos();
        Map<String, Integer> frecuenciaPalabras = new HashMap<>();

        for (String palabra : palabras) {
            frecuenciaPalabras.put(palabra, frecuenciaPalabras.getOrDefault(palabra, 0) + 1);
        }

        List<String> palabrasUnicas = new ArrayList<>(frecuenciaPalabras.keySet());
        Collections.sort(palabrasUnicas, (a, b) -> Integer.compare(frecuenciaPalabras.get(b), frecuenciaPalabras.get(a)));
        Random random = new Random();

        int filas = 8;
        int columnas = 5;
        int anchoCelda = panel.getWidth() / columnas;
        int altoCelda = panel.getHeight() / filas;

        BufferedImage imagen = new BufferedImage(panel.getWidth(), panel.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = imagen.createGraphics();

        List<Rectangle> rectangulosOcupados = new ArrayList<>(); // Rectángulos ocupados por palabras

        for (String palabra : palabrasUnicas) {
            int tamañoFuente = 12 + frecuenciaPalabras.get(palabra) * 3; // Aumenta el tamaño basado en la frecuencia
            int rojo = random.nextInt(256);
            int verde = random.nextInt(256);
            int azul = random.nextInt(256);
            Color color = new Color(rojo, verde, azul);

            g2d.setFont(new Font("Papyrus", Font.BOLD, tamañoFuente));
            g2d.setColor(color);

            // Genera un rectángulo para la palabra
            int anchoPalabra = g2d.getFontMetrics().stringWidth(palabra);
            int altoPalabra = g2d.getFontMetrics().getHeight();
            Rectangle rectanguloPalabra = new Rectangle();

            do {
                // Posición aleatoria dentro del panel
                int x = random.nextInt(panel.getWidth() - anchoPalabra);
                int y = random.nextInt(panel.getHeight() - altoPalabra);

                rectanguloPalabra.setBounds(x, y, anchoPalabra, altoPalabra);

                // Verifica si el rectángulo está ocupado por otra palabra
                boolean seSuperpone = false;
                for (Rectangle rect : rectangulosOcupados) {
                    if (rectanguloPalabra.intersects(rect)) {
                        seSuperpone = true;
                        break;
                    }
                }

                if (!seSuperpone) {
                    // No se superpone con otras palabras
                    g2d.drawString(palabra, x, y + g2d.getFontMetrics().getAscent());
                    rectangulosOcupados.add(rectanguloPalabra);
                    break;
                }
            } while (true);
        }

        g2d.dispose();
        panel.add(new JLabel(new ImageIcon(imagen)));
    }

    /**
     * Genera una lista de palabras de muestra.
     *
     * @return Una lista de palabras de muestra.
     */

    
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VentanaInicio().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton botonBuscarCarton;
    private javax.swing.JButton botonEnviarCarton;
    private javax.swing.JButton botonGenerarVerCartones;
    private javax.swing.JButton botonIniciarJuego;
    private javax.swing.JButton botonRegistrarJugador;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   
}
